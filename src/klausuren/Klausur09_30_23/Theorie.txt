# Aufgabe 1: Theorie
#
#  a) Erkläre, wann bzw. warum man beim Stream-basierten Schreiben den Befehl flush() verwenden
#     sollte.
		Es kann sein, dass ein character oder ein String nicht richtig in die Datei geschrieben wurde, aus welchen Gründen auch immer (weiter beschrieben in b)). 
		Dazu wird dann der flush-Befehl genutzt. Dieser schreib alles, was auf dem weg sozusagen liegen geblieben ist, in die Datei rein und sorgt dafür, dass 
		die Datei ohne Probleme gschlossen werden kann.

// My: Es gibt keinen Zusammenhang zwischen den (möglichen) IO-Exception und dem Befehl flush().
//     Wenn es zu einer IO-Exception kommt, dann kann man da mit flush() auch nichts retten.
//     Richtig ist, was du danach schreibst ("Dieser schreib alles, was auf dem weg sozusagen liegen geblieben ist, 
//     in die Datei rein und sorgt dafür, dass die Datei ohne Probleme gschlossen werden kann."). Aber eben in einem anderen Kontext.
//     Bitte mit der Musterlösung vergleichen!
// ==> 3 von 8 Punkten

#  b) Warum müssen I/O-Zugriffe in try-catch Blöcken gekapselt werden?
		Bei I/O-Zugriffen kann es diverse Probleme geben. Zum einen kann es sein, dass beim Lesen oder Schreiben in eine Datei die Verbindung getrennt wird, weil 
		man beispielsweise auf einen stick schreiben wollte und diesen rausgezogen hat oder das Programm nicht die Rechte dazu hat die Datei zu lesen oder schreiben.
		Außerdem kann es sein, dass die Datei gar nicht existiert. All dies könnte die Funktionsweise des Programms stören und um dies zu verhindern und die Exceptions
		behadeln zu können, braucht man den try-catch-Block. (Bei Eclipse sind diese sogar zwingend notwendig, da man das Programm sonst nicht starten kann)


